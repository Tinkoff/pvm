{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "definitions": {
        "ArtifactLimitDef": {
            "properties": {
                "type": {
                    "enum": [
                        "size",
                        "time"
                    ],
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "BranchStorageDef": {
            "properties": {
                "branch": {
                    "type": "string"
                },
                "dest": {
                    "type": "string"
                },
                "type": {
                    "enum": [
                        "branch"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Changelog": {
            "properties": {
                "enabled": {
                    "description": "Включает рендер чейнджлога",
                    "type": "boolean"
                },
                "front_matter": {
                    "description": "Контент, который нужно поместить в начало файла чейнджлога",
                    "type": "string"
                },
                "path": {
                    "description": "Путь до генерируемого файла чейнджлога",
                    "type": "string"
                },
                "renderer": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/ChangelogRendererBuiltin"
                        },
                        {
                            "$ref": "#/definitions/ChangelogRendererCustom"
                        }
                    ],
                    "description": "Настройка рендерера"
                },
                "skip_empty": {
                    "description": "Не помещать записи без изменений в чейнджлог",
                    "type": "boolean"
                },
                "storage": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/RepoStorageDef"
                        },
                        {
                            "$ref": "#/definitions/BranchStorageDef"
                        },
                        {
                            "$ref": "#/definitions/ExternalStorageDef"
                        }
                    ],
                    "description": "Storage settings"
                }
            },
            "type": "object"
        },
        "ChangelogRendererBuiltin": {
            "properties": {
                "show_date": {
                    "type": "boolean"
                },
                "tag_head_level": {
                    "type": "number"
                },
                "type": {
                    "enum": [
                        "builtin.list",
                        "builtin.list-with-packages"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ChangelogRendererCustom": {
            "properties": {
                "type": {
                    "enum": [
                        "custom"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ExternalStorageDef": {
            "properties": {
                "type": {
                    "enum": [
                        "external"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Omit<Changelog,\"path\"|\"storage\">": {
            "properties": {
                "enabled": {
                    "description": "Включает рендер чейнджлога",
                    "type": "boolean"
                },
                "front_matter": {
                    "description": "Контент, который нужно поместить в начало файла чейнджлога",
                    "type": "string"
                },
                "renderer": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/ChangelogRendererBuiltin"
                        },
                        {
                            "$ref": "#/definitions/ChangelogRendererCustom"
                        }
                    ],
                    "description": "Настройка рендерера"
                },
                "skip_empty": {
                    "description": "Не помещать записи без изменений в чейнджлог",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "Partial<MessengerClientConfig>": {
            "properties": {
                "author": {
                    "description": "Displayed post author customization (not supported in all messengers)",
                    "properties": {
                        "avatarEmoji": {
                            "type": "string"
                        },
                        "avatarUrl": {
                            "type": "string"
                        },
                        "name": {
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "channel": {
                    "description": "Channel id or name (in case of slack) where to send message",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "PartialObjectDeep<ArtifactLimitDef,Opts>": {
            "description": "Same as `PartialDeep`, but accepts only `object`s as inputs. Internal helper for `PartialDeep`.",
            "properties": {
                "type": {
                    "enum": [
                        "size",
                        "time"
                    ],
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "PartialObjectDeep<BranchStorageDef,Opts>": {
            "description": "Same as `PartialDeep`, but accepts only `object`s as inputs. Internal helper for `PartialDeep`.",
            "properties": {
                "branch": {
                    "type": "string"
                },
                "dest": {
                    "type": "string"
                },
                "type": {
                    "enum": [
                        "branch"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "PartialObjectDeep<Changelog&{for_packages:Omit<Changelog,\"path\"|\"storage\">&{output_dir:string;};},Opts>": {
            "description": "Same as `PartialDeep`, but accepts only `object`s as inputs. Internal helper for `PartialDeep`.",
            "properties": {
                "enabled": {
                    "description": "Включает рендер чейнджлога",
                    "type": "boolean"
                },
                "for_packages": {
                    "$ref": "#/definitions/PartialObjectDeep<Omit<Changelog,\"path\"|\"storage\">&{output_dir:string;},Opts>",
                    "description": "Changelog settings for packages individually"
                },
                "front_matter": {
                    "description": "Контент, который нужно поместить в начало файла чейнджлога",
                    "type": "string"
                },
                "path": {
                    "description": "Путь до генерируемого файла чейнджлога",
                    "type": "string"
                },
                "renderer": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/PartialObjectDeep<ChangelogRendererBuiltin,Opts>"
                        },
                        {
                            "$ref": "#/definitions/PartialObjectDeep<ChangelogRendererCustom,Opts>"
                        }
                    ],
                    "description": "Настройка рендерера"
                },
                "skip_empty": {
                    "description": "Не помещать записи без изменений в чейнджлог",
                    "type": "boolean"
                },
                "storage": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/PartialObjectDeep<RepoStorageDef,Opts>"
                        },
                        {
                            "$ref": "#/definitions/PartialObjectDeep<BranchStorageDef,Opts>"
                        },
                        {
                            "$ref": "#/definitions/PartialObjectDeep<ExternalStorageDef,Opts>"
                        }
                    ],
                    "description": "Storage settings"
                }
            },
            "type": "object"
        },
        "PartialObjectDeep<ChangelogRendererBuiltin,Opts>": {
            "description": "Same as `PartialDeep`, but accepts only `object`s as inputs. Internal helper for `PartialDeep`.",
            "properties": {
                "show_date": {
                    "type": "boolean"
                },
                "tag_head_level": {
                    "type": "number"
                },
                "type": {
                    "enum": [
                        "builtin.list",
                        "builtin.list-with-packages"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "PartialObjectDeep<ChangelogRendererCustom,Opts>": {
            "description": "Same as `PartialDeep`, but accepts only `object`s as inputs. Internal helper for `PartialDeep`.",
            "properties": {
                "type": {
                    "enum": [
                        "custom"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "PartialObjectDeep<Config,Opts>": {
            "description": "Same as `PartialDeep`, but accepts only `object`s as inputs. Internal helper for `PartialDeep`.",
            "properties": {
                "changelog": {
                    "$ref": "#/definitions/PartialObjectDeep<Changelog&{for_packages:Omit<Changelog,\"path\"|\"storage\">&{output_dir:string;};},Opts>",
                    "description": "Changelog generator settings"
                },
                "core": {
                    "$ref": "#/definitions/PartialObjectDeep<{deps_keys:(\"dependencies\"|\"devDependencies\"|\"peerDependencies\"|\"optionalDependencies\")[];},Opts>"
                },
                "dangerously_opts": {
                    "$ref": "#/definitions/PartialObjectDeep<{always_changed_workspaces?:string[];},Opts>",
                    "description": "Options that need more attention in terms of the consequences of their activation."
                },
                "git": {
                    "$ref": "#/definitions/PartialObjectDeep<{push:{try_load_ssh_keys:boolean;default_branch:string;};},Opts>"
                },
                "github": {
                    "$ref": "#/definitions/PartialObjectDeep<{auth_strategy?:\"authApp\"|\"authToken\"|\"authAction\";api_url?:string;},Opts>"
                },
                "gitlab": {
                    "$ref": "#/definitions/PartialObjectDeep<{default_url:string;api_prefix:string;authorization_type:\"bearer\"|\"private-token\";api_url?:string;url?:string;},Opts>"
                },
                "include": {
                    "description": "External configuration paths",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "jira": {
                    "$ref": "#/definitions/PartialObjectDeep<{url?:string;},Opts>"
                },
                "mark_pr": {
                    "$ref": "#/definitions/PartialObjectDeep<{analyze_update:boolean;packages_table:boolean;attach_changelog:boolean;packages_as_labels:boolean;packages_graph:boolean;renderer:ChangelogRenderer;},Opts>"
                },
                "notifications": {
                    "$ref": "#/definitions/PartialObjectDeep<{target:string|string[];clients_common_config:Partial<MessengerClientConfig>;client_configs:Record<string,Partial<MessengerClientConfig>>;},Opts>",
                    "description": "How to deal with messages."
                },
                "packages": {
                    "$ref": "#/definitions/PartialObjectDeep<{indent?:number;},Opts>"
                },
                "pkgset": {
                    "$ref": "#/definitions/PartialObjectDeep<{ignore_files:string[];affected_files:{if_changed:string[];then_affected:PkgFlexGlobs;}[];},Opts>"
                },
                "plugins": {
                    "$ref": "#/definitions/PartialObjectDeep<{local_plugins:string[];options:Record<string,Record<string,string>>;},Opts>"
                },
                "plugins_v2": {
                    "items": {
                        "$ref": "#/definitions/PluginConfig"
                    },
                    "type": "array"
                },
                "publish": {
                    "$ref": "#/definitions/PartialObjectDeep<{registry?:string;disabled_for:string[];enabled_only_for:string[];path_subdir?:string;path_mapping?:Record<string,string>;email?:string;cli_args?:string;process_npm_token?:boolean;include_monorepo_root:boolean;},Opts>"
                },
                "release": {
                    "$ref": "#/definitions/PartialObjectDeep<{ensure_branch_up_to_date:boolean;tag_only:boolean;},Opts>"
                },
                "release_list": {
                    "$ref": "#/definitions/PartialObjectDeep<{enabled:boolean;path:string;limit:ArtifactLimitDef;storage:StorageDef;},Opts>"
                },
                "slack_notification": {
                    "$ref": "#/definitions/PartialObjectDeep<Record<string,string>,Opts>",
                    "description": "See https://api.slack.com/methods/chat.postMessage#arguments"
                },
                "tagging": {
                    "$ref": "#/definitions/PartialObjectDeep<{release_tag_package:string;annotation_lookup_depth:number;suffixes:string|string[];generic_tag:{prefix:string;date_format:string;suffixes?:string|string[];};for_packages:{enabled:boolean;as_release:boolean;strip_namespace:boolean;};},Opts>"
                },
                "templates": {
                    "$ref": "#/definitions/PartialObjectDeep<{[key:string]:string;'pkg-update-deps':string;'release-commit':string;failed_vcs_push:string;},Opts>",
                    "description": "Templates\nSee https://mozilla.github.io/nunjucks/templating.html for template engine docs\nSee packages/pvm-template/lib/env.ts for extra filters and variables"
                },
                "templating": {
                    "$ref": "#/definitions/PartialObjectDeep<{use_short_names:boolean;setup_script?:string;filters:{cutList:{maxLen:number;};};vars:{[key:string]:string|number;releaseLink?:string;};},Opts>"
                },
                "update": {
                    "$ref": "#/definitions/PartialObjectDeep<{default_release_type:\"minor\"|\"major\"|\"patch\";include_root:boolean|\"auto\";include_uncommited:boolean;update_dependants:boolean|{match:string;release_type:\"none\"|SemverReleaseType|\"as-dep\";}[];no_release_ref:string|false;dependants_release_type:SemverReleaseType|\"as-dep\";hints_file:string;workspace_release_files:boolean;autolint:boolean;respect_zero_major_version:boolean;commit_via_platform:boolean;push_remote:string;retry_via_platform_if_failed_via_vcs:boolean;release_type_overrides:{type:\"none\"|SemverReleaseType;files_match:string[];}[];graph:{title:string;strip_namespace:boolean;};},Opts>"
                },
                "vcs": {
                    "$ref": "#/definitions/PartialObjectDeep<{builtin_type:\"auto\"|\"git\"|\"fs\";},Opts>",
                    "description": "Version control system settings"
                },
                "versioning": {
                    "$ref": "#/definitions/PartialObjectDeep<{unified:boolean|string[];unified_versions_for:(string|string[])[];source:\"file\"|\"tag\"|\"package\";source_file:string;independent_packages:string[];},Opts>"
                }
            },
            "type": "object"
        },
        "PartialObjectDeep<ExternalStorageDef,Opts>": {
            "description": "Same as `PartialDeep`, but accepts only `object`s as inputs. Internal helper for `PartialDeep`.",
            "properties": {
                "type": {
                    "enum": [
                        "external"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "PartialObjectDeep<Omit<Changelog,\"path\"|\"storage\">&{output_dir:string;},Opts>": {
            "description": "Same as `PartialDeep`, but accepts only `object`s as inputs. Internal helper for `PartialDeep`.",
            "properties": {
                "enabled": {
                    "description": "Включает рендер чейнджлога",
                    "type": "boolean"
                },
                "front_matter": {
                    "description": "Контент, который нужно поместить в начало файла чейнджлога",
                    "type": "string"
                },
                "output_dir": {
                    "description": "Output dir for individual package changelog files",
                    "type": "string"
                },
                "renderer": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/PartialObjectDeep<ChangelogRendererBuiltin,Opts>"
                        },
                        {
                            "$ref": "#/definitions/PartialObjectDeep<ChangelogRendererCustom,Opts>"
                        }
                    ],
                    "description": "Настройка рендерера"
                },
                "skip_empty": {
                    "description": "Не помещать записи без изменений в чейнджлог",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "PartialObjectDeep<Partial<MessengerClientConfig>,Opts>": {
            "description": "Same as `PartialDeep`, but accepts only `object`s as inputs. Internal helper for `PartialDeep`.",
            "properties": {
                "author": {
                    "$ref": "#/definitions/PartialObjectDeep<{name?:string;avatarEmoji?:string;avatarUrl?:string;},Opts>",
                    "description": "Displayed post author customization (not supported in all messengers)"
                },
                "channel": {
                    "description": "Channel id or name (in case of slack) where to send message",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "PartialObjectDeep<Record<string,Partial<MessengerClientConfig>>,Opts>": {
            "description": "Same as `PartialDeep`, but accepts only `object`s as inputs. Internal helper for `PartialDeep`.",
            "type": "object"
        },
        "PartialObjectDeep<Record<string,Record<string,string>>,Opts>": {
            "description": "Same as `PartialDeep`, but accepts only `object`s as inputs. Internal helper for `PartialDeep`.",
            "type": "object"
        },
        "PartialObjectDeep<Record<string,string>,Opts>": {
            "description": "Same as `PartialDeep`, but accepts only `object`s as inputs. Internal helper for `PartialDeep`.",
            "type": "object"
        },
        "PartialObjectDeep<RepoStorageDef,Opts>": {
            "description": "Same as `PartialDeep`, but accepts only `object`s as inputs. Internal helper for `PartialDeep`.",
            "properties": {
                "dest": {
                    "type": "string"
                },
                "type": {
                    "enum": [
                        "repo"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "PartialObjectDeep<{[key:string]:string;'pkg-update-deps':string;'release-commit':string;failed_vcs_push:string;},Opts>": {
            "description": "Same as `PartialDeep`, but accepts only `object`s as inputs. Internal helper for `PartialDeep`.",
            "properties": {
                "failed_vcs_push": {
                    "description": "If vcs push failed then render error message for slack with this template",
                    "type": "string"
                },
                "pkg-update-deps": {
                    "description": "Release notes template",
                    "type": "string"
                },
                "release-commit": {
                    "description": "Release commit template",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "PartialObjectDeep<{[key:string]:string|number;releaseLink?:string;},Opts>": {
            "description": "Same as `PartialDeep`, but accepts only `object`s as inputs. Internal helper for `PartialDeep`.",
            "properties": {
                "releaseLink": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "PartialObjectDeep<{always_changed_workspaces?:string[];},Opts>": {
            "description": "Same as `PartialDeep`, but accepts only `object`s as inputs. Internal helper for `PartialDeep`.",
            "properties": {
                "always_changed_workspaces": {
                    "description": "A glob mask array that defines the packets that the system will interpret as always modified.\nThe mask will be applied to the path of the packages (workspaces).\nThis setting will affect the following places:\n- getPackages method in '@pvm/pvm' (except 'released' and 'updated' types)\n- pvm-update or pvm-release commands and update mechanic",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "PartialObjectDeep<{analyze_update:boolean;packages_table:boolean;attach_changelog:boolean;packages_as_labels:boolean;packages_graph:boolean;renderer:ChangelogRenderer;},Opts>": {
            "description": "Same as `PartialDeep`, but accepts only `object`s as inputs. Internal helper for `PartialDeep`.",
            "properties": {
                "analyze_update": {
                    "description": "Enable various checks of repo packages. In particular check sync of versions between packages. Mark-pr will print warnings\nin case of problems detected.",
                    "type": "boolean"
                },
                "attach_changelog": {
                    "description": "Attach changelog to pull request",
                    "type": "boolean"
                },
                "packages_as_labels": {
                    "description": "Add package names as labes to pull request",
                    "type": "boolean"
                },
                "packages_graph": {
                    "description": "Attach package deps graph to pull request",
                    "type": "boolean"
                },
                "packages_table": {
                    "description": "Output table of packages with following info: package name, package version, release type, update reason",
                    "type": "boolean"
                },
                "renderer": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/PartialObjectDeep<ChangelogRendererBuiltin,Opts>"
                        },
                        {
                            "$ref": "#/definitions/PartialObjectDeep<ChangelogRendererCustom,Opts>"
                        }
                    ],
                    "description": "Changelog render settings"
                }
            },
            "type": "object"
        },
        "PartialObjectDeep<{auth_strategy?:\"authApp\"|\"authToken\"|\"authAction\";api_url?:string;},Opts>": {
            "description": "Same as `PartialDeep`, but accepts only `object`s as inputs. Internal helper for `PartialDeep`.",
            "properties": {
                "api_url": {
                    "description": "Optional url of github server",
                    "type": "string"
                },
                "auth_strategy": {
                    "default": "env.CI ? 'authAction' : 'authToken'",
                    "description": "Supported github authorization strategies. See https://github.com/octokit/authentication-strategies.js/ for\nmore info.",
                    "enum": [
                        "authAction",
                        "authApp",
                        "authToken"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "PartialObjectDeep<{builtin_type:\"auto\"|\"git\"|\"fs\";},Opts>": {
            "description": "Same as `PartialDeep`, but accepts only `object`s as inputs. Internal helper for `PartialDeep`.",
            "properties": {
                "builtin_type": {
                    "description": "Version system type",
                    "enum": [
                        "auto",
                        "fs",
                        "git"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "PartialObjectDeep<{cutList:{maxLen:number;};},Opts>": {
            "description": "Same as `PartialDeep`, but accepts only `object`s as inputs. Internal helper for `PartialDeep`.",
            "properties": {
                "cutList": {
                    "$ref": "#/definitions/PartialObjectDeep<{maxLen:number;},Opts>"
                }
            },
            "type": "object"
        },
        "PartialObjectDeep<{default_release_type:\"minor\"|\"major\"|\"patch\";include_root:boolean|\"auto\";include_uncommited:boolean;update_dependants:boolean|{match:string;release_type:\"none\"|SemverReleaseType|\"as-dep\";}[];no_release_ref:string|false;dependants_release_type:SemverReleaseType|\"as-dep\";hints_file:string;workspace_release_files:boolean;autolint:boolean;respect_zero_major_version:boolean;commit_via_platform:boolean;push_remote:string;retry_via_platform_if_failed_via_vcs:boolean;release_type_overrides:{type:\"none\"|SemverReleaseType;files_match:string[];}[];graph:{title:string;strip_namespace:boolean;};},Opts>": {
            "description": "Same as `PartialDeep`, but accepts only `object`s as inputs. Internal helper for `PartialDeep`.",
            "properties": {
                "autolint": {
                    "description": "Lint and fix packages package.json files before update and commit them",
                    "type": "boolean"
                },
                "commit_via_platform": {
                    "description": "Perform commits via vcs platform api (gitlab, github etc.)",
                    "type": "boolean"
                },
                "default_release_type": {
                    "description": "Type of version change according to semver",
                    "enum": [
                        "major",
                        "minor",
                        "patch"
                    ],
                    "type": "string"
                },
                "dependants_release_type": {
                    "description": "How to increment version of dependant packages. 'as-dep' means use same version as in changed dependency.",
                    "enum": [
                        "as-dep",
                        "major",
                        "minor",
                        "patch"
                    ],
                    "type": "string"
                },
                "graph": {
                    "$ref": "#/definitions/PartialObjectDeep<{title:string;strip_namespace:boolean;},Opts>",
                    "description": "Updated packages graph settings"
                },
                "hints_file": {
                    "description": "File which can configure release process per merge-request",
                    "type": "string"
                },
                "include_root": {
                    "description": "Include root pkg depending on file changes",
                    "enum": [
                        "auto",
                        false,
                        true
                    ]
                },
                "include_uncommited": {
                    "description": "Include uncommited files into changed packages calculation",
                    "type": "boolean"
                },
                "no_release_ref": {
                    "anyOf": [
                        {
                            "enum": [
                                false
                            ],
                            "type": "boolean"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "description": "Git ref for changed calculations when no previous release exists. Or false if pvm should calculate it by itself."
                },
                "push_remote": {
                    "description": "Git remote path that is used in git push. Calculated automatically if not specified.",
                    "type": "string"
                },
                "release_type_overrides": {
                    "description": "Override calculated release type",
                    "items": {
                        "properties": {
                            "files_match": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "type": {
                                "enum": [
                                    "major",
                                    "minor",
                                    "none",
                                    "patch"
                                ],
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "respect_zero_major_version": {
                    "description": "Downgrade semver release type by one level if major part in package version is zero. Major to minor, and minor to patch.",
                    "type": "boolean"
                },
                "retry_via_platform_if_failed_via_vcs": {
                    "description": "Retry operation via platform if vcs operation failed",
                    "type": "boolean"
                },
                "update_dependants": {
                    "anyOf": [
                        {
                            "items": {
                                "properties": {
                                    "match": {
                                        "description": "Packages [universal selector]([universal selector](/book/glossary.md)",
                                        "type": "string"
                                    },
                                    "release_type": {
                                        "description": "Dependant release type. If not set then update.dependants_release_type is used. 'as-dep' means use same version as in changed dependency.",
                                        "enum": [
                                            "as-dep",
                                            "major",
                                            "minor",
                                            "none",
                                            "patch"
                                        ],
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            "type": "array"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "description": "Update dependant packages of changed. If provided list of objects with `match` property where `match` is [universal selector](/book/glossary.md) then only for those who match these selectors will dependants be updated"
                },
                "workspace_release_files": {
                    "description": "Use special release files, that are force semver release type of package. If disabled, than these files are ignored.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "PartialObjectDeep<{default_url:string;api_prefix:string;authorization_type:\"bearer\"|\"private-token\";api_url?:string;url?:string;},Opts>": {
            "description": "Same as `PartialDeep`, but accepts only `object`s as inputs. Internal helper for `PartialDeep`.",
            "properties": {
                "api_prefix": {
                    "description": "Gitlab api path",
                    "type": "string"
                },
                "api_url": {
                    "description": "Separete url used as gitlab api endpoint",
                    "type": "string"
                },
                "authorization_type": {
                    "description": "Gitlab authorization type",
                    "enum": [
                        "bearer",
                        "private-token"
                    ],
                    "type": "string"
                },
                "default_url": {
                    "description": "Gitlab url. Used to api requests, and repo entities links if url or api_url are not set.",
                    "type": "string"
                },
                "url": {
                    "description": "Forced url endpoint. If not specified then additional calculation will be performed.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "PartialObjectDeep<{deps_keys:(\"dependencies\"|\"devDependencies\"|\"peerDependencies\"|\"optionalDependencies\")[];},Opts>": {
            "description": "Same as `PartialDeep`, but accepts only `object`s as inputs. Internal helper for `PartialDeep`.",
            "properties": {
                "deps_keys": {
                    "description": "Dependency lists that should be updated and used when package version updates",
                    "items": {
                        "enum": [
                            "dependencies",
                            "devDependencies",
                            "optionalDependencies",
                            "peerDependencies"
                        ],
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "PartialObjectDeep<{enabled:boolean;as_release:boolean;strip_namespace:boolean;},Opts>": {
            "description": "Same as `PartialDeep`, but accepts only `object`s as inputs. Internal helper for `PartialDeep`.",
            "properties": {
                "as_release": {
                    "description": "Add as release in source code platform. Otherwise only as git tag.",
                    "type": "boolean"
                },
                "enabled": {
                    "description": "If enabled add tag for each package in {pkg.name}-v{semver} format",
                    "type": "boolean"
                },
                "strip_namespace": {
                    "description": "Strip namespaces from package name",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "PartialObjectDeep<{enabled:boolean;path:string;limit:ArtifactLimitDef;storage:StorageDef;},Opts>": {
            "description": "Same as `PartialDeep`, but accepts only `object`s as inputs. Internal helper for `PartialDeep`.",
            "properties": {
                "enabled": {
                    "description": "Enable storing releases meta-info in specified storage (right now only git repository is supported)",
                    "type": "boolean"
                },
                "limit": {
                    "$ref": "#/definitions/PartialObjectDeep<ArtifactLimitDef,Opts>",
                    "description": "How to limit entries count in release list"
                },
                "path": {
                    "description": "Path to release list artifact file",
                    "type": "string"
                },
                "storage": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/PartialObjectDeep<RepoStorageDef,Opts>"
                        },
                        {
                            "$ref": "#/definitions/PartialObjectDeep<BranchStorageDef,Opts>"
                        },
                        {
                            "$ref": "#/definitions/PartialObjectDeep<ExternalStorageDef,Opts>"
                        }
                    ],
                    "description": "Storage settings"
                }
            },
            "type": "object"
        },
        "PartialObjectDeep<{ensure_branch_up_to_date:boolean;tag_only:boolean;},Opts>": {
            "description": "Same as `PartialDeep`, but accepts only `object`s as inputs. Internal helper for `PartialDeep`.",
            "properties": {
                "ensure_branch_up_to_date": {
                    "description": "Before pushing changes, check for upstream branch is still actual",
                    "type": "boolean"
                },
                "tag_only": {
                    "description": "Do not commit any worktree changes via vcs",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "PartialObjectDeep<{ignore_files:string[];affected_files:{if_changed:string[];then_affected:PkgFlexGlobs;}[];},Opts>": {
            "description": "Same as `PartialDeep`, but accepts only `object`s as inputs. Internal helper for `PartialDeep`.",
            "properties": {
                "affected_files": {
                    "items": {
                        "properties": {
                            "if_changed": {
                                "description": "Glob files patterns list of what is changed",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "then_affected": {
                                "anyOf": [
                                    {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    {
                                        "enum": [
                                            "*"
                                        ],
                                        "type": "string"
                                    }
                                ],
                                "description": "Glob files patterns list of which files should be counted as changed when files in `if_changed` section touched.\nCan be list of glob patterns or a string `*` which means, that all packages would be returned"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "ignore_files": {
                    "description": "Exclude files from changed files list. Affects calculation of package sets",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "PartialObjectDeep<{indent?:number;},Opts>": {
            "description": "Same as `PartialDeep`, but accepts only `object`s as inputs. Internal helper for `PartialDeep`.",
            "properties": {
                "indent": {
                    "description": "Ident for package.json write",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "PartialObjectDeep<{local_plugins:string[];options:Record<string,Record<string,string>>;},Opts>": {
            "description": "Same as `PartialDeep`, but accepts only `object`s as inputs. Internal helper for `PartialDeep`.",
            "properties": {
                "local_plugins": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "options": {
                    "$ref": "#/definitions/PartialObjectDeep<Record<string,Record<string,string>>,Opts>"
                }
            },
            "type": "object"
        },
        "PartialObjectDeep<{maxLen:number;},Opts>": {
            "description": "Same as `PartialDeep`, but accepts only `object`s as inputs. Internal helper for `PartialDeep`.",
            "properties": {
                "maxLen": {
                    "description": "Max list length, passed to cutList template filter",
                    "type": "number"
                }
            },
            "type": "object"
        },
        "PartialObjectDeep<{name?:string;avatarEmoji?:string;avatarUrl?:string;},Opts>": {
            "description": "Same as `PartialDeep`, but accepts only `object`s as inputs. Internal helper for `PartialDeep`.",
            "properties": {
                "avatarEmoji": {
                    "type": "string"
                },
                "avatarUrl": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "PartialObjectDeep<{prefix:string;date_format:string;suffixes?:string|string[];},Opts>": {
            "description": "Same as `PartialDeep`, but accepts only `object`s as inputs. Internal helper for `PartialDeep`.",
            "properties": {
                "date_format": {
                    "description": "Date follows after prefix, delimited by '-' symbol",
                    "type": "string"
                },
                "prefix": {
                    "description": "Release tag prefix",
                    "type": "string"
                },
                "suffixes": {
                    "anyOf": [
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "type": "string"
                        }
                    ]
                }
            },
            "type": "object"
        },
        "PartialObjectDeep<{push:{try_load_ssh_keys:boolean;default_branch:string;};},Opts>": {
            "description": "Same as `PartialDeep`, but accepts only `object`s as inputs. Internal helper for `PartialDeep`.",
            "properties": {
                "push": {
                    "$ref": "#/definitions/PartialObjectDeep<{try_load_ssh_keys:boolean;default_branch:string;},Opts>"
                }
            },
            "type": "object"
        },
        "PartialObjectDeep<{registry?:string;disabled_for:string[];enabled_only_for:string[];path_subdir?:string;path_mapping?:Record<string,string>;email?:string;cli_args?:string;process_npm_token?:boolean;include_monorepo_root:boolean;},Opts>": {
            "description": "Same as `PartialDeep`, but accepts only `object`s as inputs. Internal helper for `PartialDeep`.",
            "properties": {
                "cli_args": {
                    "description": "Additional cli args string. Passed \"as is\" to `npm publish` command",
                    "type": "string"
                },
                "disabled_for": {
                    "description": "Do not perform publish for packages that matches specified [locators](/book/glossary.md#locators).",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "email": {
                    "description": "Used only if your npm version less than v6.7.0 and you don't have email in npm conf files,\\nas npm of these versions fails to publish without email in settings\"",
                    "format": "email",
                    "type": "string"
                },
                "enabled_only_for": {
                    "description": "Patterns list for published packages. If not empty then only those packages, that match [locators](/book/glossary.md#locators), are going to publish",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "include_monorepo_root": {
                    "description": "Allow to publish monorepo root. By default this is impossible",
                    "type": "boolean"
                },
                "path_mapping": {
                    "$ref": "#/definitions/PartialObjectDeep<Record<string,string>,Opts>",
                    "description": "By default publish path for each package and package path itself is same thing.\\nBut you can replace the beginning of each package path to another string via providing this argument.\\nExample: 'src/components' => 'lib/components'\""
                },
                "path_subdir": {
                    "description": "Subdirectory to publish. This value is appended to each publish path after \"path_mapping\" options have been applied",
                    "type": "string"
                },
                "process_npm_token": {
                    "description": "Use NPM_TOKEN environment variable for result auth npm config calculation",
                    "type": "boolean"
                },
                "registry": {
                    "description": "Registry for publishing if not specified in publishConfig.registry field of package.json",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "PartialObjectDeep<{release_tag_package:string;annotation_lookup_depth:number;suffixes:string|string[];generic_tag:{prefix:string;date_format:string;suffixes?:string|string[];};for_packages:{enabled:boolean;as_release:boolean;strip_namespace:boolean;};},Opts>": {
            "description": "Same as `PartialDeep`, but accepts only `object`s as inputs. Internal helper for `PartialDeep`.",
            "properties": {
                "annotation_lookup_depth": {
                    "description": "How deep to look for the version in the release tags annotations, if no version for the package can be found",
                    "type": "integer"
                },
                "for_packages": {
                    "$ref": "#/definitions/PartialObjectDeep<{enabled:boolean;as_release:boolean;strip_namespace:boolean;},Opts>"
                },
                "generic_tag": {
                    "$ref": "#/definitions/PartialObjectDeep<{prefix:string;date_format:string;suffixes?:string|string[];},Opts>",
                    "description": "To be used only if all conditions are met:\n1. Value `versioning.unified` = false.\n2. Value `tagging.release_tag_package` is not set.\n3. Repository can have packages of different versions according to pvm settings."
                },
                "release_tag_package": {
                    "description": "If you don't use the `versioning.unified = true` setting, this option will cause the version of given package to be used as release tags prefixed with `v`.\nThe package must exist, otherwise a runtime exception will be thrown.\nIf `versioning.unified = true` is used, the setting will be ignored in favor of the version of the main package group\n(see the description of the versioning.unified setting).",
                    "type": "string"
                },
                "suffixes": {
                    "anyOf": [
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "description": "Suffixes for release tags, could be name of package which exports list of strings\nor it could be explicit list of strings"
                }
            },
            "type": "object"
        },
        "PartialObjectDeep<{target:string|string[];clients_common_config:Partial<MessengerClientConfig>;client_configs:Record<string,Partial<MessengerClientConfig>>;},Opts>": {
            "description": "Same as `PartialDeep`, but accepts only `object`s as inputs. Internal helper for `PartialDeep`.",
            "properties": {
                "client_configs": {
                    "$ref": "#/definitions/PartialObjectDeep<Record<string,Partial<MessengerClientConfig>>,Opts>",
                    "description": "Default message values, each for specific messenger client. Its priority is higher than clients_common_config."
                },
                "clients_common_config": {
                    "$ref": "#/definitions/PartialObjectDeep<Partial<MessengerClientConfig>,Opts>",
                    "description": "Common config which applied to all messenger clients. For example channel name is same in several messengers and you\ndont want to duplicate it"
                },
                "target": {
                    "anyOf": [
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "description": "Which clients use to send messages:<br />\n`all` - all provided and ready to use clients.<br />\n`first_available` - find first ready client (order determined by order of clients in notifications.clients config) and use it.<br />\n`MessengerName` or list of names - try to send message through specified clients.<br />\n<br />\nIn all cases `ready` client means all necessary env variables or configuration values are provided. If message\nnot sent to messenger you expect to - look at log output"
                }
            },
            "type": "object"
        },
        "PartialObjectDeep<{title:string;strip_namespace:boolean;},Opts>": {
            "description": "Same as `PartialDeep`, but accepts only `object`s as inputs. Internal helper for `PartialDeep`.",
            "properties": {
                "strip_namespace": {
                    "type": "boolean"
                },
                "title": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "PartialObjectDeep<{try_load_ssh_keys:boolean;default_branch:string;},Opts>": {
            "description": "Same as `PartialDeep`, but accepts only `object`s as inputs. Internal helper for `PartialDeep`.",
            "properties": {
                "default_branch": {
                    "description": "Default push branch if you try to\n\ntodo: ask reason for this setting",
                    "type": "string"
                },
                "try_load_ssh_keys": {
                    "description": "Try to load system ssh keys",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "PartialObjectDeep<{unified:boolean|string[];unified_versions_for:(string|string[])[];source:\"file\"|\"tag\"|\"package\";source_file:string;independent_packages:string[];},Opts>": {
            "description": "Same as `PartialDeep`, but accepts only `object`s as inputs. Internal helper for `PartialDeep`.",
            "properties": {
                "independent_packages": {
                    "description": "Packages who always use independent versioning regardless of `unified_versions_for` or `unified` settings.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "source": {
                    "description": "Where do the versions come from. Also affects the way the versions are saved. See versioning section in documentation for more info.",
                    "enum": [
                        "file",
                        "package",
                        "tag"
                    ],
                    "type": "string"
                },
                "source_file": {
                    "description": "Where from and where to save versions if source equals `file`.",
                    "type": "string"
                },
                "unified": {
                    "anyOf": [
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "description": "`unified = true` or `unified = [<pkg-selector list>] will create the \"main\" group of packages, by default including all packages,\nwithin which all packages will have the same version.\nIf there are options `unified_versions_for` and/or `independent_packages` then these will create additional groups,\npackages from which will be excluded from the main group.\nThis will also cause the release tags to be equal to the version of the main group of packages with the `v` prefix."
                },
                "unified_versions_for": {
                    "description": "List of groups, each group is a list of globs or just one glob string for workspace paths, where each of group have own unified versioning.\nIf you want unified versioning for whole repository, choose ['*'] value or better set `unified` setting to true.",
                    "items": {
                        "anyOf": [
                            {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "PartialObjectDeep<{url?:string;},Opts>": {
            "description": "Same as `PartialDeep`, but accepts only `object`s as inputs. Internal helper for `PartialDeep`.",
            "properties": {
                "url": {
                    "description": "jira url. If set, then jira-task ids will be transformed into links.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "PartialObjectDeep<{use_short_names:boolean;setup_script?:string;filters:{cutList:{maxLen:number;};};vars:{[key:string]:string|number;releaseLink?:string;};},Opts>": {
            "description": "Same as `PartialDeep`, but accepts only `object`s as inputs. Internal helper for `PartialDeep`.",
            "properties": {
                "filters": {
                    "$ref": "#/definitions/PartialObjectDeep<{cutList:{maxLen:number;};},Opts>"
                },
                "setup_script": {
                    "description": "Path to script that can add templates extra variables, filters etc. (See https://mozilla.github.io/nunjucks/templating.html and nunjucks.Environment for more)",
                    "type": "string"
                },
                "use_short_names": {
                    "description": "Use shot package names (\"short\" means without namespace part)",
                    "type": "boolean"
                },
                "vars": {
                    "$ref": "#/definitions/PartialObjectDeep<{[key:string]:string|number;releaseLink?:string;},Opts>"
                }
            },
            "type": "object"
        },
        "PluginConfig": {
            "properties": {
                "options": {
                    "$ref": "#/definitions/PluginOptions"
                },
                "plugin": {
                    "anyOf": [
                        {
                            "allOf": [
                                {
                                    "properties": {
                                        "name": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                {
                                    "properties": {
                                        "factory": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            ]
                        },
                        {
                            "allOf": [
                                {
                                    "properties": {
                                        "name": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                {
                                    "$ref": "#/definitions/{configExt:PartialObjectDeep<Config,Opts>;}"
                                }
                            ]
                        },
                        {
                            "allOf": [
                                {
                                    "properties": {
                                        "name": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                {
                                    "properties": {
                                        "configExt": {
                                            "$ref": "#/definitions/PartialObjectDeep<Config,Opts>"
                                        },
                                        "factory": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            ]
                        },
                        {
                            "type": [
                                "string",
                                "object"
                            ]
                        }
                    ]
                }
            },
            "type": "object"
        },
        "PluginOptions": {
            "type": "object"
        },
        "Record<string,Partial<MessengerClientConfig>>": {
            "type": "object"
        },
        "Record<string,Record<string,string>>": {
            "type": "object"
        },
        "Record<string,string>": {
            "type": "object"
        },
        "RepoStorageDef": {
            "properties": {
                "dest": {
                    "type": "string"
                },
                "type": {
                    "enum": [
                        "repo"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "{configExt:PartialObjectDeep<Config,Opts>;}": {
            "properties": {
                "configExt": {
                    "$ref": "#/definitions/PartialObjectDeep<Config,Opts>"
                }
            },
            "type": "object"
        }
    },
    "description": "Configuration schema.",
    "properties": {
        "changelog": {
            "allOf": [
                {
                    "$ref": "#/definitions/Changelog"
                },
                {
                    "properties": {
                        "for_packages": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/Omit<Changelog,\"path\"|\"storage\">"
                                },
                                {
                                    "properties": {
                                        "output_dir": {
                                            "description": "Output dir for individual package changelog files",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            ],
                            "description": "Changelog settings for packages individually"
                        }
                    },
                    "type": "object"
                }
            ],
            "description": "Changelog generator settings"
        },
        "core": {
            "properties": {
                "deps_keys": {
                    "description": "Dependency lists that should be updated and used when package version updates",
                    "items": {
                        "enum": [
                            "dependencies",
                            "devDependencies",
                            "optionalDependencies",
                            "peerDependencies"
                        ],
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "dangerously_opts": {
            "description": "Options that need more attention in terms of the consequences of their activation.",
            "properties": {
                "always_changed_workspaces": {
                    "description": "A glob mask array that defines the packets that the system will interpret as always modified.\nThe mask will be applied to the path of the packages (workspaces).\nThis setting will affect the following places:\n- getPackages method in '@pvm/pvm' (except 'released' and 'updated' types)\n- pvm-update or pvm-release commands and update mechanic",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "git": {
            "properties": {
                "push": {
                    "properties": {
                        "default_branch": {
                            "description": "Default push branch if you try to\n\ntodo: ask reason for this setting",
                            "type": "string"
                        },
                        "try_load_ssh_keys": {
                            "description": "Try to load system ssh keys",
                            "type": "boolean"
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object"
        },
        "github": {
            "properties": {
                "api_url": {
                    "description": "Optional url of github server",
                    "type": "string"
                },
                "auth_strategy": {
                    "default": "env.CI ? 'authAction' : 'authToken'",
                    "description": "Supported github authorization strategies. See https://github.com/octokit/authentication-strategies.js/ for\nmore info.",
                    "enum": [
                        "authAction",
                        "authApp",
                        "authToken"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "gitlab": {
            "properties": {
                "api_prefix": {
                    "description": "Gitlab api path",
                    "type": "string"
                },
                "api_url": {
                    "description": "Separete url used as gitlab api endpoint",
                    "type": "string"
                },
                "authorization_type": {
                    "description": "Gitlab authorization type",
                    "enum": [
                        "bearer",
                        "private-token"
                    ],
                    "type": "string"
                },
                "default_url": {
                    "description": "Gitlab url. Used to api requests, and repo entities links if url or api_url are not set.",
                    "type": "string"
                },
                "url": {
                    "description": "Forced url endpoint. If not specified then additional calculation will be performed.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "include": {
            "description": "External configuration paths",
            "items": {
                "type": "string"
            },
            "type": "array"
        },
        "jira": {
            "properties": {
                "url": {
                    "description": "jira url. If set, then jira-task ids will be transformed into links.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "mark_pr": {
            "properties": {
                "analyze_update": {
                    "description": "Enable various checks of repo packages. In particular check sync of versions between packages. Mark-pr will print warnings\nin case of problems detected.",
                    "type": "boolean"
                },
                "attach_changelog": {
                    "description": "Attach changelog to pull request",
                    "type": "boolean"
                },
                "packages_as_labels": {
                    "description": "Add package names as labes to pull request",
                    "type": "boolean"
                },
                "packages_graph": {
                    "description": "Attach package deps graph to pull request",
                    "type": "boolean"
                },
                "packages_table": {
                    "description": "Output table of packages with following info: package name, package version, release type, update reason",
                    "type": "boolean"
                },
                "renderer": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/ChangelogRendererBuiltin"
                        },
                        {
                            "$ref": "#/definitions/ChangelogRendererCustom"
                        }
                    ],
                    "description": "Changelog render settings"
                }
            },
            "type": "object"
        },
        "notifications": {
            "description": "How to deal with messages.",
            "properties": {
                "client_configs": {
                    "$ref": "#/definitions/Record<string,Partial<MessengerClientConfig>>",
                    "description": "Default message values, each for specific messenger client. Its priority is higher than clients_common_config."
                },
                "clients_common_config": {
                    "$ref": "#/definitions/Partial<MessengerClientConfig>",
                    "description": "Common config which applied to all messenger clients. For example channel name is same in several messengers and you\ndont want to duplicate it"
                },
                "target": {
                    "anyOf": [
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "description": "Which clients use to send messages:<br />\n`all` - all provided and ready to use clients.<br />\n`first_available` - find first ready client (order determined by order of clients in notifications.clients config) and use it.<br />\n`MessengerName` or list of names - try to send message through specified clients.<br />\n<br />\nIn all cases `ready` client means all necessary env variables or configuration values are provided. If message\nnot sent to messenger you expect to - look at log output"
                }
            },
            "type": "object"
        },
        "packages": {
            "properties": {
                "indent": {
                    "description": "Ident for package.json write",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "pkgset": {
            "properties": {
                "affected_files": {
                    "items": {
                        "properties": {
                            "if_changed": {
                                "description": "Glob files patterns list of what is changed",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "then_affected": {
                                "anyOf": [
                                    {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    {
                                        "enum": [
                                            "*"
                                        ],
                                        "type": "string"
                                    }
                                ],
                                "description": "Glob files patterns list of which files should be counted as changed when files in `if_changed` section touched.\nCan be list of glob patterns or a string `*` which means, that all packages would be returned"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "ignore_files": {
                    "description": "Exclude files from changed files list. Affects calculation of package sets",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "plugins": {
            "properties": {
                "local_plugins": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "options": {
                    "$ref": "#/definitions/Record<string,Record<string,string>>"
                }
            },
            "type": "object"
        },
        "plugins_v2": {
            "items": {
                "$ref": "#/definitions/PluginConfig"
            },
            "type": "array"
        },
        "publish": {
            "properties": {
                "cli_args": {
                    "description": "Additional cli args string. Passed \"as is\" to `npm publish` command",
                    "type": "string"
                },
                "disabled_for": {
                    "description": "Do not perform publish for packages that matches specified [locators](/book/glossary.md#locators).",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "email": {
                    "description": "Used only if your npm version less than v6.7.0 and you don't have email in npm conf files,\\nas npm of these versions fails to publish without email in settings\"",
                    "format": "email",
                    "type": "string"
                },
                "enabled_only_for": {
                    "description": "Patterns list for published packages. If not empty then only those packages, that match [locators](/book/glossary.md#locators), are going to publish",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "include_monorepo_root": {
                    "description": "Allow to publish monorepo root. By default this is impossible",
                    "type": "boolean"
                },
                "path_mapping": {
                    "$ref": "#/definitions/Record<string,string>",
                    "description": "By default publish path for each package and package path itself is same thing.\\nBut you can replace the beginning of each package path to another string via providing this argument.\\nExample: 'src/components' => 'lib/components'\""
                },
                "path_subdir": {
                    "description": "Subdirectory to publish. This value is appended to each publish path after \"path_mapping\" options have been applied",
                    "type": "string"
                },
                "process_npm_token": {
                    "description": "Use NPM_TOKEN environment variable for result auth npm config calculation",
                    "type": "boolean"
                },
                "registry": {
                    "description": "Registry for publishing if not specified in publishConfig.registry field of package.json",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "release": {
            "properties": {
                "ensure_branch_up_to_date": {
                    "description": "Before pushing changes, check for upstream branch is still actual",
                    "type": "boolean"
                },
                "tag_only": {
                    "description": "Do not commit any worktree changes via vcs",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "release_list": {
            "properties": {
                "enabled": {
                    "description": "Enable storing releases meta-info in specified storage (right now only git repository is supported)",
                    "type": "boolean"
                },
                "limit": {
                    "$ref": "#/definitions/ArtifactLimitDef",
                    "description": "How to limit entries count in release list"
                },
                "path": {
                    "description": "Path to release list artifact file",
                    "type": "string"
                },
                "storage": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/RepoStorageDef"
                        },
                        {
                            "$ref": "#/definitions/BranchStorageDef"
                        },
                        {
                            "$ref": "#/definitions/ExternalStorageDef"
                        }
                    ],
                    "description": "Storage settings"
                }
            },
            "type": "object"
        },
        "slack_notification": {
            "$ref": "#/definitions/Record<string,string>",
            "description": "See https://api.slack.com/methods/chat.postMessage#arguments"
        },
        "tagging": {
            "properties": {
                "annotation_lookup_depth": {
                    "description": "How deep to look for the version in the release tags annotations, if no version for the package can be found",
                    "type": "integer"
                },
                "for_packages": {
                    "properties": {
                        "as_release": {
                            "description": "Add as release in source code platform. Otherwise only as git tag.",
                            "type": "boolean"
                        },
                        "enabled": {
                            "description": "If enabled add tag for each package in {pkg.name}-v{semver} format",
                            "type": "boolean"
                        },
                        "strip_namespace": {
                            "description": "Strip namespaces from package name",
                            "type": "boolean"
                        }
                    },
                    "type": "object"
                },
                "generic_tag": {
                    "description": "To be used only if all conditions are met:\n1. Value `versioning.unified` = false.\n2. Value `tagging.release_tag_package` is not set.\n3. Repository can have packages of different versions according to pvm settings.",
                    "properties": {
                        "date_format": {
                            "description": "Date follows after prefix, delimited by '-' symbol",
                            "type": "string"
                        },
                        "prefix": {
                            "description": "Release tag prefix",
                            "type": "string"
                        },
                        "suffixes": {
                            "anyOf": [
                                {
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": "array"
                                },
                                {
                                    "type": "string"
                                }
                            ]
                        }
                    },
                    "type": "object"
                },
                "release_tag_package": {
                    "description": "If you don't use the `versioning.unified = true` setting, this option will cause the version of given package to be used as release tags prefixed with `v`.\nThe package must exist, otherwise a runtime exception will be thrown.\nIf `versioning.unified = true` is used, the setting will be ignored in favor of the version of the main package group\n(see the description of the versioning.unified setting).",
                    "type": "string"
                },
                "suffixes": {
                    "anyOf": [
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "description": "Suffixes for release tags, could be name of package which exports list of strings\nor it could be explicit list of strings"
                }
            },
            "type": "object"
        },
        "templates": {
            "additionalProperties": {
                "type": "string"
            },
            "description": "Templates\nSee https://mozilla.github.io/nunjucks/templating.html for template engine docs\nSee packages/pvm-template/lib/env.ts for extra filters and variables",
            "properties": {
                "failed_vcs_push": {
                    "description": "If vcs push failed then render error message for slack with this template",
                    "type": "string"
                },
                "pkg-update-deps": {
                    "description": "Release notes template",
                    "type": "string"
                },
                "release-commit": {
                    "description": "Release commit template",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "templating": {
            "properties": {
                "filters": {
                    "properties": {
                        "cutList": {
                            "properties": {
                                "maxLen": {
                                    "description": "Max list length, passed to cutList template filter",
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                "setup_script": {
                    "description": "Path to script that can add templates extra variables, filters etc. (See https://mozilla.github.io/nunjucks/templating.html and nunjucks.Environment for more)",
                    "type": "string"
                },
                "use_short_names": {
                    "description": "Use shot package names (\"short\" means without namespace part)",
                    "type": "boolean"
                },
                "vars": {
                    "additionalProperties": {
                        "type": [
                            "string",
                            "number"
                        ]
                    },
                    "properties": {
                        "releaseLink": {
                            "type": "string"
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object"
        },
        "update": {
            "properties": {
                "autolint": {
                    "description": "Lint and fix packages package.json files before update and commit them",
                    "type": "boolean"
                },
                "commit_via_platform": {
                    "description": "Perform commits via vcs platform api (gitlab, github etc.)",
                    "type": "boolean"
                },
                "default_release_type": {
                    "description": "Type of version change according to semver",
                    "enum": [
                        "major",
                        "minor",
                        "patch"
                    ],
                    "type": "string"
                },
                "dependants_release_type": {
                    "description": "How to increment version of dependant packages. 'as-dep' means use same version as in changed dependency.",
                    "enum": [
                        "as-dep",
                        "major",
                        "minor",
                        "patch"
                    ],
                    "type": "string"
                },
                "graph": {
                    "description": "Updated packages graph settings",
                    "properties": {
                        "strip_namespace": {
                            "type": "boolean"
                        },
                        "title": {
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "hints_file": {
                    "description": "File which can configure release process per merge-request",
                    "type": "string"
                },
                "include_root": {
                    "description": "Include root pkg depending on file changes",
                    "enum": [
                        "auto",
                        false,
                        true
                    ]
                },
                "include_uncommited": {
                    "description": "Include uncommited files into changed packages calculation",
                    "type": "boolean"
                },
                "no_release_ref": {
                    "anyOf": [
                        {
                            "enum": [
                                false
                            ],
                            "type": "boolean"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "description": "Git ref for changed calculations when no previous release exists. Or false if pvm should calculate it by itself."
                },
                "push_remote": {
                    "description": "Git remote path that is used in git push. Calculated automatically if not specified.",
                    "type": "string"
                },
                "release_type_overrides": {
                    "description": "Override calculated release type",
                    "items": {
                        "properties": {
                            "files_match": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "type": {
                                "enum": [
                                    "major",
                                    "minor",
                                    "none",
                                    "patch"
                                ],
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "respect_zero_major_version": {
                    "description": "Downgrade semver release type by one level if major part in package version is zero. Major to minor, and minor to patch.",
                    "type": "boolean"
                },
                "retry_via_platform_if_failed_via_vcs": {
                    "description": "Retry operation via platform if vcs operation failed",
                    "type": "boolean"
                },
                "update_dependants": {
                    "anyOf": [
                        {
                            "items": {
                                "properties": {
                                    "match": {
                                        "description": "Packages [universal selector]([universal selector](/book/glossary.md)",
                                        "type": "string"
                                    },
                                    "release_type": {
                                        "description": "Dependant release type. If not set then update.dependants_release_type is used. 'as-dep' means use same version as in changed dependency.",
                                        "enum": [
                                            "as-dep",
                                            "major",
                                            "minor",
                                            "none",
                                            "patch"
                                        ],
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            "type": "array"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "description": "Update dependant packages of changed. If provided list of objects with `match` property where `match` is [universal selector](/book/glossary.md) then only for those who match these selectors will dependants be updated"
                },
                "workspace_release_files": {
                    "description": "Use special release files, that are force semver release type of package. If disabled, than these files are ignored.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "vcs": {
            "description": "Version control system settings",
            "properties": {
                "builtin_type": {
                    "description": "Version system type",
                    "enum": [
                        "auto",
                        "fs",
                        "git"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "versioning": {
            "properties": {
                "independent_packages": {
                    "description": "Packages who always use independent versioning regardless of `unified_versions_for` or `unified` settings.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "source": {
                    "description": "Where do the versions come from. Also affects the way the versions are saved. See versioning section in documentation for more info.",
                    "enum": [
                        "file",
                        "package",
                        "tag"
                    ],
                    "type": "string"
                },
                "source_file": {
                    "description": "Where from and where to save versions if source equals `file`.",
                    "type": "string"
                },
                "unified": {
                    "anyOf": [
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "description": "`unified = true` or `unified = [<pkg-selector list>] will create the \"main\" group of packages, by default including all packages,\nwithin which all packages will have the same version.\nIf there are options `unified_versions_for` and/or `independent_packages` then these will create additional groups,\npackages from which will be excluded from the main group.\nThis will also cause the release tags to be equal to the version of the main group of packages with the `v` prefix."
                },
                "unified_versions_for": {
                    "description": "List of groups, each group is a list of globs or just one glob string for workspace paths, where each of group have own unified versioning.\nIf you want unified versioning for whole repository, choose ['*'] value or better set `unified` setting to true.",
                    "items": {
                        "anyOf": [
                            {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "type": "array"
                }
            },
            "type": "object"
        }
    },
    "type": "object"
}

