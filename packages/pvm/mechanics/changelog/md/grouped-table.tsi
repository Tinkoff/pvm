import { parse as parseMeta } from 'markdown-meta'
import { splitTag, fsEscape } from '@pvm/pvm'
import TableBuilder, { TableBuilderOpts } from '../table-builder'
import remark from '../remark'
import groupReleases from '../group-releases'
import { ReleaseLike } from '../../types'

type TableOptions = TableBuilderOpts & Partial<{
  includeUpdates: boolean,
}>

function table(releasesIterator: Iterable<ReleaseLike>, options: TableOptions = {}) {
  const builder = new TableBuilder(options)

  for (const releases of groupReleases(releasesIterator)) {
    const firstRelease = releases[0]
    const { description } = firstRelease
    const meta = parseMeta(description)

    if (meta.type === 'update-deps' && !options.includeUpdates) {
      continue
    }

    const createdAt = new Date(firstRelease.created_at)

    const linksToReleases = releases.map(release => {
      const [name, version] = splitTag(release.tag_name)
      const fsName = fsEscape(name)
      const displayName = `${name}@${version}`

      return `
        <a class="anchor" aria-hidden="true" id="${release.tag_name}"></a>
        <a href="./${fsName}.html">${displayName}</a>
      `
    }).join('<br/>')

    const normalDesc = remark.render(description)

    builder.addRow(createdAt, firstRelease.tag_name, [linksToReleases, normalDesc])
  }

  return builder.build()
}

export default table
